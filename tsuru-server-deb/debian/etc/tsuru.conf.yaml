listen: "0.0.0.0:8080"
admin-listen: "0.0.0.0:8081"

host: http://localhost:8080

# Uncomment the following lines to enable HTTPS on Tsuru. You will need the
# paths to the certificate and key files.
#
# use-tls: true
# tls-cert-file: /path/to/cert.pem
# tls-key-file: /path/to/key.pem

# Database configuration. Tsuru API needs a MongoDB server. By default, it will
# connect on localhost, in the default port, and use the database "tsuru".
# Uncomment and customize the lines below to change these values.
#
# database:
#   url: 127.0.0.1:27017
#   name: tsuru

# Git configuration. These settings refer to Gandalf, the git management tool
# used by Tsuru.
#
#   * unit-repo: it's the path where Tsuru will clone app code in units. This
#                value should not change after its initial definition.
#   * api-server: HTTP URL where Gandalf is accessible. Tsuru will use this URL
#                 to create users and repositories.
#   * rw-host: rw-host is the host string that will be used for reading and
#              writing in Git repositories. It will be used to build the SSH
#              URL for the git repository, and need to be accessible from the
#              internet.
#   * ro-host: ro-host is the host string that will be used for reading data
#              from Git repositories. It will be used to build the read-only
#              URL for the repository. This host need to be accessible from
#              units. You may use the private IP of the Gandalf host.
git:
  unit-repo: /home/application/current
  api-server: http://127.0.0.1:8000
  rw-host: my.gandalf.domain
  ro-host: 10.10.10.10

# Authentication configuration.
#
#    * token-expire-days: this option controls the time (in days) for a token
#                         to expire.
#    * hash-cost: Tsuru uses bcrypt for password hashing, here you can control
#                 the cost of the hashing.
#    * user-registration: by default, users are not able to register themselves
#                         in Tsuru server (via the "user-create" command).
#                         Changing this options to true enables the user-create
#                         command.
#
# auth:
#   token-expire-days: 7
#   hash-cost: 10
#   user-registration: false

# Below are settings for the Docker provisioner. Tsuru uses Docker in a
# clustered environment, so there are some settings related to the scheduling
# of containers in the cluster.
#
#    * servers: list of docker servers. Used in non-segregated mode (see
#               segregate for more details).
#    * collection: name of the database collection that Docker provisioner will
#                  use to store information about containers in the cluster.
#    * repository-namespace: the namespace to use in Docker images. For
#                            instance, an app named blog will have an image
#                            <namespace>/blog.
#    * router: the router to use.
#    * deploy-cmd: command to run every time user runs deploy. When using
#                  Tsuru's default images, just uncomment the line.
#    * segregate: indicates whether tsuru should use a scheduler that
#                  segregates containers among Docker nodes. When using this
#                  scheduler, each team will have a group of Docker nodes and
#                  Tsuru will spawn new containers for that team only on these
#                  nodes. This scheduler can be used to segregate subnets per
#                  team.
#    * scheduler: configuration for the scheduler. In order to make the
#                  cluster run faster, it's recommended to use the Redis
#                  storage. It will store the relation between containers and
#                  nodes.
#    * run-cmd: command that will start the application. Also includes the port
#               that will be used for redirecting traffic. This is the port
#               that applications should bind.
#    * ssh: Tsuru will start the container with a SSH server. This section
#               contains options that describe which command will be used to
#               add the public key to containers, the public key path, the user
#               and the path to the SSH server (which is optional).
# 
# provisioner: docker
# hipache:
#   domain: cloud.company.com
# docker:
#   registry: docker-registry.company.com
#   servers:
#     - http://localhost:4243
#   collection: docker
#   repository-namespace: tsuru
#   router: hipache
#   deploy-cmd: /var/lib/tsuru/deploy
#   segregate: false
#   scheduler:
#     redis-server: 127.0.0.1:6379
#     redis-prefix: docker-cluster
#     redis-password: s3cr3t
#   run-cmd:
#     bin: /var/lib/tsuru/start
#     port: "8888"
#   ssh:
#     add-key-cmd: /var/lib/tsuru/add-key
#     public-key: /home/ubuntu/.ssh/id_rsa.pub
#     user: ubuntu
#     sshd-path: /usr/sbin/sshd

# The name of the admin team. When ommited, no team will be able to administrate Tsuru.
# 
# admin-team: admin

# Quota information. Tsuru supports two kind of quotas: number of units per app
# and number of apps per user.
#
# quota:
#   units-per-app: 2
#   apps-per-user: 2
